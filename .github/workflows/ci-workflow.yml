# GitHub Actions Workflow: Continuous Deployment for Iris API
#
# This workflow automates the process of building a Docker image for the Iris API,
# pushing it to Docker Hub, and deploying it to a Google Kubernetes Engine (GKE) cluster.
# It triggers automatically on every push to the 'main' branch.

name: Continuous Deployment - Deploy Iris API to Kubernetes

on:
  push:
    branches: [ main ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # --- 1. Checkout Code ---
      # Checks out the repository code so the workflow can access it.
      - name: Checkout repository
        uses: actions/checkout@v3

      # --- 2. Docker Build & Push ---
      # This section logs into Docker Hub, builds the Docker image, and pushes it.
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: true
          # Tags the image with the Git commit SHA for version tracking.
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/iris-api:${{ github.sha }}

      # --- 3. GCP Authentication & GKE Setup ---
      # Installs the gcloud CLI and authenticates with your Google Cloud project.
      - name: Install gcloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          version: 'latest'
          export_default_credentials: false
      
      # --- âœ… FIX: Install GKE Auth Plugin ---
      # This is the required step to allow kubectl to authenticate with GKE clusters.
      - name: Install gke-gcloud-auth-plugin
        run: gcloud components install gke-gcloud-auth-plugin

      - name: Authenticate gcloud with service account
        uses: 'google-github-actions/auth@v2'
        with: 
          credentials_json: '${{ secrets.GCP_SA_KEY }}'

      # Configures kubectl to connect to your GKE cluster.
      - name: Get GKE credentials
        run: |
          gcloud config set project velvety-rookery-461404-b5
          gcloud container clusters get-credentials iris-cluster --zone us-central1 --project velvety-rookery-461404-b5

      # --- 4. Deploy to Kubernetes ---
      # Deploys the application to the GKE cluster.
      - name: Deploy to Kubernetes cluster
        run: |
          # Replaces the image placeholder in the deployment manifest with the newly built image.
          sed -i 's|IMAGE_PLACEHOLDER|${{ secrets.DOCKERHUB_USERNAME }}/iris-api:${{ github.sha }}|g' deployment.yaml
          
          # Applies the Kubernetes manifest to the cluster.
          kubectl apply --validate=false -f deployment.yaml
          
          # Waits for the deployment to complete successfully.
          kubectl rollout status deployment/iris-api-deployment

      # --- 5. Post-deployment Comment (using CML) ---
      # This section uses Continuous Machine Learning (CML) to post a success
      # message as a comment on the commit that triggered the workflow.
      - name: Set up Node.js for CML
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install CML via NPM
        run: npm install -g @dvcorg/cml

      - name: Post deployment status as a comment on the merge commit
        env:
          # The GITHUB_TOKEN is required for CML to post comments to the repository.
          REPO_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          cml comment create --commit-sha=${{ github.sha }} "âœ… **Deployment Successful**\n\nA new version of the Iris API has been deployed to Kubernetes.\n\nðŸ“¦ **Image Tag:** \`${{ secrets.DOCKERHUB_USERNAME }}/iris-api:${{ github.sha }}\`"
